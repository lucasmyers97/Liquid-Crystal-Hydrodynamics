"""
This program tests the finite difference methods found in the 
FiniteDifference.py module. Right now functions are hardcoded, but soon they
will be able to be programatically generated by sympy.

Lucas Myers
Written: July 15, 2020
"""

import numpy as np
from LiquidCrystalHydrodynamics import FiniteDifference as fd

x_domain = [0, 4*np.pi]
y_domain = [0, 4*np.pi]
n = 1000

def f1(x, y, m=1, n=1):
    return np.sin(m*x)*np.cos(n*y)

def d2x_f1(x, y, m=1, n=1):
    return -m**2*np.sin(m*x)*np.cos(n*y)

x = np.linspace(x_domain[0], x_domain[1], num=n)
y = np.linspace(y_domain[0], y_domain[1], num=n)

X, Y = np.meshgrid(x, y, indexing='ij')
dx = X[1, 0] - X[0, 0]

error = ( d2x_f1(X, Y) - fd.dx2(f1(X, Y), dx) ) / d2x_f1(X, Y)

print(np.max(error))